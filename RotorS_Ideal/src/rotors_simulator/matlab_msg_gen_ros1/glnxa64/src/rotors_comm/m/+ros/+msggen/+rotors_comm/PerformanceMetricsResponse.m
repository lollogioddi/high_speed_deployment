
classdef PerformanceMetricsResponse < ros.Message
    %PerformanceMetricsResponse MATLAB implementation of rotors_comm/PerformanceMetricsResponse
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'rotors_comm/PerformanceMetricsResponse' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '489ff84073d2b57991c40f5769f49311' % The MD5 Checksum of the message definition
        PropertyList = { 'Overshoot1' 'Overshoot2' 'Overshoot3' 'Overshoot4' 'Overshoot5' 'Overshoot6' 'SettlingTime1' 'SettlingTime2' 'SettlingTime3' 'SettlingTime4' 'SettlingTime5' 'SettlingTime6' } % List of non-constant message properties
        ROSPropertyList = { 'overshoot1' 'overshoot2' 'overshoot3' 'overshoot4' 'overshoot5' 'overshoot6' 'settling_time1' 'settling_time2' 'settling_time3' 'settling_time4' 'settling_time5' 'settling_time6' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Overshoot1
        Overshoot2
        Overshoot3
        Overshoot4
        Overshoot5
        Overshoot6
        SettlingTime1
        SettlingTime2
        SettlingTime3
        SettlingTime4
        SettlingTime5
        SettlingTime6
    end
    methods
        function set.Overshoot1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PerformanceMetricsResponse', 'Overshoot1');
            obj.Overshoot1 = double(val);
        end
        function set.Overshoot2(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PerformanceMetricsResponse', 'Overshoot2');
            obj.Overshoot2 = double(val);
        end
        function set.Overshoot3(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PerformanceMetricsResponse', 'Overshoot3');
            obj.Overshoot3 = double(val);
        end
        function set.Overshoot4(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PerformanceMetricsResponse', 'Overshoot4');
            obj.Overshoot4 = double(val);
        end
        function set.Overshoot5(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PerformanceMetricsResponse', 'Overshoot5');
            obj.Overshoot5 = double(val);
        end
        function set.Overshoot6(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PerformanceMetricsResponse', 'Overshoot6');
            obj.Overshoot6 = double(val);
        end
        function set.SettlingTime1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PerformanceMetricsResponse', 'SettlingTime1');
            obj.SettlingTime1 = double(val);
        end
        function set.SettlingTime2(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PerformanceMetricsResponse', 'SettlingTime2');
            obj.SettlingTime2 = double(val);
        end
        function set.SettlingTime3(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PerformanceMetricsResponse', 'SettlingTime3');
            obj.SettlingTime3 = double(val);
        end
        function set.SettlingTime4(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PerformanceMetricsResponse', 'SettlingTime4');
            obj.SettlingTime4 = double(val);
        end
        function set.SettlingTime5(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PerformanceMetricsResponse', 'SettlingTime5');
            obj.SettlingTime5 = double(val);
        end
        function set.SettlingTime6(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PerformanceMetricsResponse', 'SettlingTime6');
            obj.SettlingTime6 = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.rotors_comm.PerformanceMetricsResponse.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.rotors_comm.PerformanceMetricsResponse(strObj);
        end
    end
end
